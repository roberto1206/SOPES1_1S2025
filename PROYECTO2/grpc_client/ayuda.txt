crear el go.mod
go mod init nombre_archivo

crear el go.sum
go mod tidy

para proto
protoc --go_out=. --go-grpc_out=. proto/weather.proto

SOPES1_1S2025
└── PROYECTO2
    ├── api_rust
    |   ├── src
    |   |   └── main.rs
    |   ├── Cargo.lock
    |   ├── Cargo.toml
    │   └── Dockerfile
    ├── grpc_client
    │   ├── proto
    │   │   └── weather.proto
    │   ├── Dockerfile
    │   ├── go.mod
    │   ├── go.sum
    │   ├── grpc_client.go
    │   └── main.go
    ├── grpc_server_kafka
    │   ├── proto
    │   ├── Dockerfile
    │   ├── go.mod
    │   ├── go.sum
    │   └── main.go
    ├── grpc_server_rabbit
    │   ├── proto
    │   ├── Dockerfile
    │   ├── go.mod
    │   ├── go.sum
    │   └── main.go
    ├── docker-compose.yaml
    └── README.md

--HARBOR
docker context ls
docker context use default
sudo nano /etc/docker/daemon.json
docker build -t api_rust:latest .
docker tag api_rust:latest 34.134.118.207:80/proyecto2-202201724/api_rust:latest
docker push 34.134.118.207:80/proyecto2-202201724/api_rust:latest

docker build -t grpc_server_kafka:latest .
docker tag grpc_server_kafka:latest 34.134.118.207:80/proyecto2-202201724/grpc_server_kafka:latest
docker push 34.134.118.207:80/proyecto2-202201724/grpc_server_kafka:latest

docker build -t grpc_server_rabbit:latest .
docker tag grpc_server_rabbit:latest 34.134.118.207:80/proyecto2-202201724/grpc_server_rabbit:latest
docker push 34.134.118.207:80/proyecto2-202201724/grpc_server_rabbit:latest

docker build -t grpc_client:latest .
docker tag grpc_client:latest rmiguel12/grpc_client:latest
docker push rmiguel12/grpc_client:latest

docker build -t grpc_server_kafka:latest .
docker tag grpc_server_kafka:latest rmiguel12/grpc_server_kafka:latest
docker push rmiguel12/grpc_server_kafka:latest

docker build -t grpc_server_rabbit:latest .
docker tag grpc_server_rabbit:latest rmiguel12/grpc_server_rabbit:latest
docker push rmiguel12/grpc_server_rabbit:latest

docker build -t rmiguel12/api_rust:1.0 .
docker push rmiguel12/api_rust:1.0

docker build -t rmiguel12/grpc_client:3.0 .
docker push rmiguel12/grpc_client:3.0

docker build -t rmiguel12/kafka-producer:4.0 .
docker push rmiguel12/kafka-producer:4.0

docker build -t rmiguel12/kafka-consumer:11.0 .
docker push rmiguel12/kafka-consumer:11.0

docker build --no-cache -t rmiguel12/kafka-consumer-final:latest .

kubectl apply -f api-rust-deployment.yaml
kubectl apply -f grpc-client-deployment.yaml
kubectl apply -f grpc-server-rabbit-deployment.yaml
kubectl apply -f grpc-server-kafka-deployment.yaml
kubectl apply -f kafka-topic.yaml
kubectl apply -f kafka-consumer.yaml
kubectl apply -f kafka-consumer-deployment.yaml
kubectl apply -f rabbit-consumer-deployment.yaml
kubectl apply -f kafka-service.yaml
kubectl apply -f kafka-deployment.yaml

kubectl apply -f rust-service.yaml
kubectl apply -f rust-deployment.yaml
kubectl apply -f namespace.yaml
kubectl apply -f ingress.yaml
kubectl apply -f grpc-client-service.yaml
kubectl apply -f grpc-client-deployment.yaml


kubectl get pods
kubectl get svc

# Reemplaza $INGRESS_IP con la IP real
curl -X POST http://35.238.219.159.nip.io/input -H "Content-Type: application/json" -d '{"description":"Esta lloviendo","country":"GT","weather":"Lluvioso"}'
curl -X POST http://35.238.219.159.nip.io/input -H "Content-Type: application/json" -d '{"description":"El cielo está despejado y hace sol","country":"MX","weather":"Soleado"}'



usar kafka
helm repo add bitnami https://charts.bitnami.com/bitnami
helm repo add provectus https://provectus.github.io/kafka-ui-charts
helm repo update

helm install rabbitmq bitnami/rabbitmq \
  --set replicaCount=1 \
  --set auth.username=admin \
  --set auth.password=admin123 \
  --set service.type=LoadBalancer \
  --set persistence.enabled=false

helm install kafka bitnami/kafka \
  --set replicas=1 \
  --set zookeeper.enabled=true \
  --set service.type=LoadBalancer \
  --set persistence.enabled=false



verificar
kubectl get svc

kubectl get svc --watch

desinstalar
helm uninstall kafka-ui
helm list


otra solucion
kubectl create namespace portainer
portainer admin - admin123456789

kubectl create namespace kafka

gcloud auth login
gcloud config set project alpine-life-454401-t0
gcloud container clusters list
gcloud container clusters get-credentials [NOMBRE_DEL_CLUSTER] --region [REGIÓN]
gcloud container clusters get-credentials tweets --region us-central1-c

kubectl get pods

kubectl get pods -n tweets
kubectl get pods -n strimzi

instalar strimzi
kubectl create -f https://strimzi.io/install/latest?namespace=weather-tweets -n weather-tweets

kubectl logs -n tweets pod/kafka-consumer-6f67b89895-b7t64

kubectl delete pod kafka-consumer-6f67b89895-4vzr4 -n tweets

ver el ingress
kubectl get svc ingress-nginx-controller -n ingress-nginx --watch
kubectl get svc -n tweets

En la v4.0 de consumer ya se empieza con redis  

grafana
kubectl apply -f grafana-simple.yaml
kubectl port-forward -n monitoring svc/grafana 3000:3000
si se reinicia se pierde todo

kubectl port-forward -n weather-tweets svc/grafana 3000:3000

kubectl run -i --tty redis-cli --rm \
  -n weather-tweets \
  --image=redis:7 \
  --restart=Never \
  --command -- redis-cli -h redis-service


pasos para instalar todo
instalar helm
curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

kubectl create namespace ingress-nginx
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm install ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-nginx \
  --create-namespace

kubectl get pods -n ingress-nginx
kubectl get svc -n ingress-nginx


kubectl create namespace strimzi

helm repo add strimzi https://strimzi.io/charts/
helm repo update

helm install strimzi-kafka-operator strimzi/strimzi-kafka-operator \
  --namespace strimzi \
  --create-namespace

kubectl get pods -n strimzi

ips externas
kubectl get svc -n tweets

kubectl get svc redis-service -n weather-tweets

grafana
helm repo add grafana https://grafana.github.io/helm-charts
helm repo update
helm install grafana grafana/grafana --namespace tweets --create-namespace
kubectl get pods -n tweets
kubectl port-forward svc/grafana 3000:80 -n tweets

para que funcione strimzi
kubectl create -f https://strimzi.io/install/latest?namespace=weather-tweets -n weather-tweets


kubectl port-forward -n tweets pod/redis-7b986b9f57-mpdn7 6379:6379
redis-cli -h redis -p 6379


